name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  GO_VERSION: '1.21'
  NODE_VERSION: '18'
  DOCKER_IMAGE: 'boilerplate-blueprint'
  AWS_REGION: 'us-east-1'

jobs:
  # Test and build job
  test-and-build:
    name: Test & Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: web/package-lock.json

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install Go dependencies
        run: go mod download

      - name: Run Go linting
        run: make lint

      - name: Run Go tests
        run: make test
        continue-on-error: true  # Allow build to continue even if tests fail

      - name: Install frontend dependencies
        run: cd web && npm ci

      - name: Lint frontend
        run: cd web && npm run lint

      - name: Test frontend
        run: cd web && npm test
        continue-on-error: true

      - name: Build application
        run: make build

      - name: Build frontend
        run: cd web && npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            boilerplate-blueprint
            web/dist/
          retention-days: 7

  # Security scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test-and-build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Run Gosec Security Scanner
        uses: securecodewarrior/github-action-gosec@master
        with:
          args: './...'

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Docker build and push
  docker:
    name: Docker Build & Push
    runs-on: ubuntu-latest
    needs: [test-and-build, security-scan]
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          path: artifacts/

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_IMAGE }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # Deploy to staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: docker
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_STAGING }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_STAGING }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy to AWS Lambda (Staging)
        run: |
          npm install -g serverless
          serverless deploy --stage staging --region ${{ env.AWS_REGION }}

      - name: Run health check
        run: |
          API_URL=$(serverless info --stage staging --region ${{ env.AWS_REGION }} | grep "HttpApiUrl" | awk '{print $2}')
          echo "Staging API URL: $API_URL"

          # Wait for deployment to be ready
          sleep 30

          # Health check
          if curl -f -s "$API_URL/api/health" > /dev/null; then
            echo "✅ Staging deployment successful"
          else
            echo "❌ Staging health check failed"
            exit 1
          fi

  # Deploy to production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: docker
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PRODUCTION }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PRODUCTION }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy to AWS Lambda (Production)
        run: |
          npm install -g serverless
          serverless deploy --stage prod --region ${{ env.AWS_REGION }}

      - name: Run health check
        run: |
          API_URL=$(serverless info --stage prod --region ${{ env.AWS_REGION }} | grep "HttpApiUrl" | awk '{print $2}')
          echo "Production API URL: $API_URL"

          # Wait for deployment to be ready
          sleep 30

          # Health check
          if curl -f -s "$API_URL/api/health" > /dev/null; then
            echo "✅ Production deployment successful"
          else
            echo "❌ Production health check failed"
            exit 1
          fi

      - name: Create GitHub deployment
        uses: actions/github-script@v7
        with:
          script: |
            const apiUrl = process.env.API_URL;
            github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: 'production',
              description: `Deployed to production: ${apiUrl}`
            });

  # Performance testing
  performance-test:
    name: Performance Test
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/develop'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install hey (HTTP load testing)
        run: go install github.com/rakyll/hey@latest

      - name: Run performance tests
        run: |
          # Get staging API URL
          API_URL=$(serverless info --stage staging --region ${{ env.AWS_REGION }} | grep "HttpApiUrl" | awk '{print $2}')

          echo "Running performance tests against: $API_URL"

          # Basic health check load test
          hey -n 100 -c 10 -m GET "$API_URL/api/health"

          # API templates load test
          hey -n 50 -c 5 -m GET "$API_URL/api/templates"

      - name: Generate performance report
        run: |
          echo "## Performance Test Results" >> performance-report.md
          echo "- **Date**: $(date)" >> performance-report.md
          echo "- **Environment**: Staging" >> performance-report.md
          echo "- **Test Results**: See above output" >> performance-report.md

      - name: Upload performance report
        uses: actions/upload-artifact@v3
        with:
          name: performance-report
          path: performance-report.md

  # Notification
  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    steps:
      - name: Notify on success
        if: needs.deploy-staging.result == 'success' && (needs.deploy-production.result == 'success' || needs.deploy-production.result == 'skipped')
        run: |
          echo "✅ All deployments completed successfully!"

      - name: Notify on failure
        if: failure()
        run: |
          echo "❌ Deployment failed. Check the logs above for details."

      - name: Slack Notification
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            *Boilerplate Blueprint CI/CD Pipeline*

            Status: ${{ job.status }}
            Branch: ${{ github.ref }}
            Commit: ${{ github.sha }}

            View details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        continue-on-error: true